using System.Collections.ObjectModel;
using System.Text;

namespace ClassLibrary
{
    /// <summary>
    /// La clase <c>UserInterface</c> es responsable de construir y devolver mensajes 
    /// formateados para la interfaz de usuario, proporcionando la informaci√≥n necesaria sobre
    /// el juego, para interactuar con el usuario en el chatbot.
    /// La clase se encarga exclusivamente de generar y mostrar mensajes que se utilizan para
    /// informar al usuario sobre el estado del juego, manteni√©ndose concentrada en esta responsabilidad
    /// sin realizar ninguna l√≥gica del juego, por lo que cumple con el patr√≥n de Responsabilidad √önica(SRP)
    /// Tambi√©n esta clase es la "experta" en formatear y construir mensajes para la interfaz de
    /// usuario, ya que es la √∫nica que conoce el formato y contenido de los mensajes que se deben mostrar,
    /// por lo que sigue el patr√≥n Expert.
    /// </summary>
    public class UserInterface
    {
        /// <summary>
        /// Genera un mensaje con el cat√°logo de todos los Pok√©mon disponibles.
        /// </summary>
        /// <returns>Una cadena con el cat√°logo de nombres de Pok√©mon.</returns>
        public static string ShowMessagePokemonCatalog()
        {
            PokemonCatalogBuilder pokemons = new PokemonCatalogBuilder();

            StringBuilder catalogo = new StringBuilder();
            catalogo.AppendLine("üìú Cat√°logo de Pok√©mon:\n");

            foreach (Pokemon pokemon in pokemons.PokemonList)
            {
                catalogo.AppendLine($"{pokemon.Name}:");
                foreach (Move move in pokemon.Moves)
                {
                    catalogo.AppendLine($"   -{move.Name}: attackvalue {move.AttackValue}, accuracy {move.Accuracy} , type {move.MoveType}");
                }
            }

            return catalogo.ToString();
        }

        /// <summary>
        /// Genera un mensaje indicando el n√∫mero del Pok√©mon a seleccionar o informa que ya se han seleccionado los 6 Pok√©mon.
        /// </summary>
        /// <param name="currentSelection">El √≠ndice actual de selecci√≥n de Pok√©mon.</param>
        /// <returns>Un mensaje indicando el n√∫mero de selecci√≥n de Pok√©mon o que ya se complet√≥ la selecci√≥n.</returns>
        public static string ShowMessageToAddPokemons(int currentSelection)
        {
            if (currentSelection < 6)
            {
                return $"Selecciona el Pok√©mon n√∫mero {currentSelection + 1}:";
            }
            else
            {
                return "Ya has seleccionado 6 Pok√©mon.";
            }
        }

        /// <summary>
        /// Genera un mensaje con la lista de Pok√©mon seleccionados por el jugador.
        /// </summary>
        /// <param name="selectedPokemons">Lista de Pok√©mon seleccionados.</param>
        /// <returns>Un mensaje con los nombres de los Pok√©mon seleccionados.</returns>
        public static string ShowMessageSelectedPokemons(ReadOnlyCollection<Pokemon> selectedPokemons)
        {
            string selectedList = "‚≠êÔ∏è Pok√©mon seleccionados:\n";

            foreach (Pokemon pokemon in selectedPokemons)
            {
                selectedList += $"- {pokemon.Name}\n";
            }

            return selectedList;
        }

        /// <summary>
        /// Genera un mensaje con la informaci√≥n de salud de los Pok√©mon del jugador y del oponente.
        /// </summary>
        /// <param name="playerPokemons">Lista de Pok√©mon del jugador.</param>
        /// <param name="opponentPokemons">Lista de Pok√©mon del oponente.</param>
        /// <returns>Una cadena con la informaci√≥n de salud de los Pok√©mon.</returns>
        /// <exception cref="ArgumentNullException">Se lanza si alguna de las listas es nula.</exception>
        public static string ShowMessagePokemonHealth(ReadOnlyCollection<Pokemon> playerPokemons, ReadOnlyCollection<Pokemon> opponentPokemons)
        {
            // Validar que las listas no sean nulas
            if (playerPokemons == null)
            {
                throw new ArgumentNullException(nameof(playerPokemons),
                    "La lista de Pok√©mon del jugador no puede ser nula.");
            }

            if (opponentPokemons == null)
            {
                throw new ArgumentNullException(nameof(opponentPokemons),
                    "La lista de Pok√©mon del oponente no puede ser nula.");
            }

            // Usar StringBuilder para construir la cadena de manera eficiente
            StringBuilder healthInfo = new StringBuilder();
            healthInfo.AppendLine("üíì Salud de los Pok√©mon:");
            healthInfo.AppendLine("Pok√©mon propios:");
            foreach (Pokemon pokemon in playerPokemons)
            {
                healthInfo.AppendLine($"{pokemon.Name}: {pokemon.HealthPoints}/100 HP");
            }

            healthInfo.AppendLine("Pok√©mon oponentes:");
            foreach (Pokemon pokemon in opponentPokemons)
            {
                healthInfo.AppendLine($"{pokemon.Name}: {pokemon.HealthPoints}/100 HP");
            }

            return healthInfo.ToString();
        }

        /// <summary>
        /// Genera un mensaje indicando que el jugador ha cambiado su Pok√©mon activo y ha perdido su turno.
        /// </summary>
        /// <param name="playerDisplayName">Nombre del jugador que realiz√≥ el cambio de Pok√©mon.</param>
        /// <param name="newPokemonName">Nombre del nuevo Pok√©mon activado.</param>
        /// <returns>Mensaje formateado indicando el cambio de Pok√©mon y la p√©rdida de turno.</returns>
        public static string ShowMessageChangePokemon(string playerDisplayName, string newPokemonName)
        {
            return $"{playerDisplayName} cambi√≥ a {newPokemonName} y perdi√≥ su turno";
        }

        /// <summary>
        /// Genera un mensaje indicando que no hay jugadores en la lista de espera.
        /// </summary>
        /// <returns>Mensaje indicando que no hay nadie esperando.</returns>
        public static string ShowMessageNoPlayersWaiting()
        {
            return "No hay nadie esperando";
        }

        /// <summary>
        /// Genera un mensaje listando los nombres de los jugadores en la lista de espera.
        /// </summary>
        /// <param name="waitingPlayers">Lista de jugadores en espera.</param>
        /// <returns>Un mensaje con los nombres de los jugadores en espera.</returns>
        public static string ShowMessagePlayersWaiting(ReadOnlyCollection<Player> waitingPlayers)
        {
            StringBuilder result = new StringBuilder("Esperan: ");
            foreach (Player player in waitingPlayers)
            {
                result.AppendLine($"{player.DisplayName}");
            }

            return result.ToString();
        }

        public string AddPlayerToWaitingList(string displayName)
        {
            if (displayName == displayName)
            {
                return $"{displayName} ya est√° en la lista de espera";
            }

            return displayName;
        }

        public static string ShowBattleEndMessage(string playerName)
        {
            return $"{playerName} ha ganado la batalla";
        }
        
        public static string ShowBattleContinuesMessage(Player turnPlayer)
        {
            return $"El juego contin√∫a, es el turno de {turnPlayer.DisplayName}.";
        }

        public static string ShowMessageCurrentTurnPlayer(string currentPlayerDisplayName)
        {
            return $"üéÆ Es el turno de {currentPlayerDisplayName}.";
        }

        /// <summary>
        /// Muestra un mensaje indicando que un ataque ha ocurrido, con detalles sobre el atacante, el defensor y el movimiento usado.
        /// </summary>
        /// <param name="attackingPokemon">El Pok√©mon que est√° atacando.</param>
        /// <param name="defendingPokemon">El Pok√©mon que est√° siendo atacado.</param>
        /// <param name="attacker">El jugador que controla al Pok√©mon atacante.</param>
        /// <param name="defender">El jugador que controla al Pok√©mon defensor.</param>
        /// <returns>Un mensaje formateado indicando que el ataque ocurri√≥.</returns>
        public static string ShowMessageAttackOcurred(Pokemon attackingPokemon, Pokemon defendingPokemon,
            Player attacker, Player defender, int healthPointsBefore, int healthPointsAfter)
        {
            return
                $" Jugador {attacker.DisplayName} usa al Pok√©mon {attackingPokemon.Name} que ataca con {attacker.ActiveMove.Name} a {defendingPokemon.Name} de {defender.DisplayName}, HP pasa de {healthPointsBefore} a {healthPointsAfter}";
        }

        /// <summary>
        /// Muestra un mensaje indicando que el ataque no ocurri√≥, debido a que el Pok√©mon del jugador tiene un ataque especial activo que lo impide.
        /// </summary>
        /// <param name="attacker">El jugador que intenta realizar el ataque.</param>
        /// <param name="attackingPokemon">El Pok√©mon que est√° intentando atacar.</param>
        /// <returns>Un mensaje formateado indicando que el ataque no ocurri√≥ debido a un movimiento especial activo.</returns>
        public static string ShowMessageAttackDidNotOccur(Player attacker, Pokemon attackingPokemon)
        {
            return
                $"$ El jugador {attacker} no puede jugar porque su Pok√©mon {attackingPokemon} tiene un ataque especial activo que no lo permite";
        }

        /// <summary>
        /// Muestra un mensaje que la efectividad del ataque fue alta.
        /// </summary>
        /// <param name="attacker">El jugador que intenta realizar el ataque.</param>
        /// <param name="attackingPokemon">El Pok√©mon que est√° intentando atacar.</param>
        /// <returns>Un mensaje formateado indicando la efectividad.</returns>
        public static String ShowMessageHighEffectiveness(Double accuaracyAttack)
        {
            return $"$ La efectividad del ataque es alta:  {accuaracyAttack} ";
        }

        /// <summary>
        /// Muestra un mensaje indicando que la efectividad del mensaje fue baja.
        /// </summary>
        /// <param name="attacker">El jugador que intenta realizar el ataque.</param>
        /// <param name="attackingPokemon">El Pok√©mon que est√° intentando atacar.</param>
        /// <returns>Un mensaje formateado indicando la efectividad.</returns>
        public static string ShowMessageLowEffectiveness(double accuaracyAttack)
        {
            return $"$ La efectividad del ataque es baja: {accuaracyAttack} ";
        }

        /// <summary>
        /// Retorna un mensaje con todos los comandos disponibles y las reglas del juego.
        /// </summary>
        public static string ShowMessageHelp()
        {
            var helpMessage = new StringBuilder();
            
            // Reglas del juego
            helpMessage.AppendLine("\n=== Instrucciones del Juego ===")
                .AppendLine("1. Cada jugador debe unirse a la lista de espera con !join, para salir de la misma se usa !leave.")
                .AppendLine("2. Usa !waiting para ver los jugadores que est√°n esperando")
                .AppendLine("3. Usa !battle {username} para comenzar una batalla (el username es opcional).")
                .AppendLine("4. Antes de la batalla, usa !catalog para ver los Pok√©mon disponibles.")
                .AppendLine("5. Selecciona seis Pok√©mon con !choose {pokemon1 pokemon2 pokemon3 pokemon4 pokemon5 pokemon6}. Aseg√∫rate de separar los Pok√©mon con espacios.")
                .AppendLine("6. El juego elige aleatoriamente qui√©n comienza.")
                .AppendLine("7. Se pueden ver los movimientos disponibles de tu Pok√©mon activo con !moves.")
                .AppendLine("8. Se pueden ver los items disponibles y su cantidad con !items")
                .AppendLine("8. Se enfrentan los primeros Pok√©mon vivos de cada jugador.")
                .AppendLine("9. Usa !turn para verificar de qui√©n es el turno.")
                .AppendLine("10. En tu turno, puedes realizar una de las siguientes acciones:")
                .AppendLine("   - Usar un ataque con !attack {move} seleccionando un movimiento que tenga tu pok√©mon.")
                .AppendLine("   - Cambiar de Pok√©mon con !change {pokemon}")
                .AppendLine("   - Usar un √≠tem con !useitem {item}.")
                .AppendLine("11. Usa !hp para consultar los HP de tus Pok√©mon y los del oponente.")
                .AppendLine("12. La batalla termina cuando todos los Pok√©mon de un jugador llegan a 0 HP.")
                .AppendLine("\n !help: Muestra los comandos disponibles y las instrucciones de juego.")
                .AppendLine("!rules: Muestra las reglas del juego.");

            return helpMessage.ToString();

        }

        public static string ShowMessageRules()
        {
            var helpMessage = new StringBuilder();

            // C√≥mo funciona un ataque 
            helpMessage.AppendLine("\n=== C√≥mo Funciona el Ataque ===")
                .AppendLine("1. Usa !attack {move} para atacar con el movimiento seleccionado del Pok√©mon activo.")
                .AppendLine("2. Los ataques tienen diferentes niveles de efectividad seg√∫n los tipos de Pok√©mon (fuego, agua, planta, etc.).")
                .AppendLine("3. Los ataques especiales pueden usarse cada dos turnos y tienen efectos adicionales:")
                .AppendLine("   - Sleep: El Pok√©mon queda inactivo entre 1 y 4 turnos, sin poder atacar.")
                .AppendLine("   - Paralize: El Pok√©mon tiene una probabilidad de fallar su turno de manera aleatoria.")
                .AppendLine("   - Poison: El Pok√©mon pierde el 5% de su HP cada turno.")
                .AppendLine("   - Burn: El Pok√©mon pierde el 10% de su HP cada turno.")
                .AppendLine("4. Que se produzca un ataque o no depende de su valor de precisi√≥n y es aleatorio.")
                .AppendLine("5. El da√±o infligido por los ataques depende de si es un golpe cr√≠tico")
                .AppendLine("   - Un golpe cr√≠tico aumenta el da√±o en un 20% y tiene una probabilidad del 10%.")
                .AppendLine("5. Si un pokemon alcanza 0 HP, el pokemon actual de un jugador pasa al siguiente Pok√©mon en la lista.");

            // C√≥mo funcionan los √çtems
            helpMessage.AppendLine("\n=== C√≥mo Funcionan los √çtems ===")
                .AppendLine("1. Usa !useitem {item} para aplicar un efecto durante tu turno.")
                .AppendLine("2. Los √≠tems pueden:")
                .AppendLine("   - Revive: Revive a un Pok√©mon con el 50% de su HP total. (Cada jugador tiene 1)" )
                .AppendLine("   - FullHeal: Elimina efectos de estados especiales como par√°lisis, dormir, envenenamiento o quemaduras.(Cada jugador tiene 2)")
                .AppendLine("   - SuperPotion: Restaura 70 puntos de HP. (Cada jugador tiene 4)")
                .AppendLine("3. Usar un √≠tem consume tu turno actual.");

            return helpMessage.ToString();
        }

        /// <summary>
        /// Devuelve un string que muestra los movimientos de los Pok√©mon de forma detallada.
        /// </summary>
        public static string ReturnShowMoves(IReadOnlyList <Move> moves, Player player)
        {
            if (player == null)
            {
                return "El jugador no est√° definido.";
            }

            if (player.ActivePokemon == null)
            {
                return $"El jugador {player.DisplayName} no tiene un Pok√©mon activo.";
            }

            if (moves == null || moves.Count == 0)
            {
                return $"El Pok√©mon activo de {player.DisplayName} no tiene movimientos disponibles.";
            }

            var movesMessage = new StringBuilder();
            movesMessage.AppendLine("\n=== Lista de Movimientos ===");

            foreach (var move in moves)
            {
                movesMessage.AppendLine($"- {move.Name} (Precisi√≥n: {move.Accuracy})");
            }

            return movesMessage.ToString();
        }

    }
}

