<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Game">
            <summary>
            La clase <c>Game</c> tiene la responsabilidad de conocer a los jugadores y verificar si el juego está activo o ha terminado.
            Esto sigue el principio de responsabilidad única (SRP) ya que su única función es gestionar el estado del juego.
            Además, según el principio de "experto" (Expert), la clase <c>Game</c> es la más adecuada para gestionar estas tareas, 
            ya que contiene toda la información sobre los jugadores y el estado del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.Player1">
            <summary>
            Propiedad que almacena al jugador 1 del juego.
            La clase <c>Game</c> sigue el principio de "experto" (Expert), ya que tiene la responsabilidad de manejar los jugadores
            y su relación dentro del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.Player2">
            <summary>
            Propiedad que almacena al jugador 2 del juego.
            Similar a Player1, sigue el principio de "experto" (Expert) porque la clase <c>Game</c> necesita conocer los jugadores
            para controlar el flujo del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.TurnPlayer">
            <summary>
            Propiedad que indica qué jugador tiene el turno en el juego.
            Esto facilita la implementación de reglas como el cambio de turno, alineado con el principio de responsabilidad única (SRP).
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.PlayIsOn">
            <summary>
            Propiedad que indica si el juego sigue activo (true) o ha terminado (false).
            Esto también sigue el SRP, ya que la clase <c>Game</c> es la responsable de gestionar el estado del juego, 
            y no otros objetos, respetando el principio de segregación de responsabilidades.
            </summary>
        </member>
        <member name="M:ClassLibrary.Game.#ctor(ClassLibrary.Player,ClassLibrary.Player)">
            <summary>
            Constructor de la clase <c>Game</c>. Inicializa los jugadores y el estado del juego.
            El constructor asigna las propiedades adecuadamente siguiendo el principio de Liskov Substitution Principle (LSP),
            lo cual permite que cualquier clase derivada de <c>Player</c> funcione correctamente en la lógica del juego.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El segundo jugador.</param>
        </member>
        <member name="M:ClassLibrary.Game.CheckIfGameEnds">
            <summary>
            Verifica si el juego debe terminar revisando si todos los Pokémon de alguno de los jugadores tienen 0 puntos de vida.
            Si un jugador pierde todos sus Pokémon, el juego termina y se declara un ganador.
            Este método puede ser fácilmente extendido o modificado con otras reglas de fin de juego, 
            alineado con el principio de Polimorfismo, donde nuevas reglas de finalización pueden ser añadidas sin alterar la estructura básica.
            </summary>
        </member>
        <member name="T:ClassLibrary.Move">
            <summary>
            La clase <c>Move</c> tiene la responsabilidad de almacenar y gestionar los valores de ataque, defensa y curación de un movimiento.
            Esto sigue el principio de responsabilidad única (SRP) ya que su única función es representar los atributos de un movimiento en el juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Move.Name">
            <summary>
            Nombre del movimiento. La clase <c>Move</c> tiene la responsabilidad de manejar el nombre ya que es parte esencial de la identidad del movimiento.
            </summary>
        </member>
        <member name="P:ClassLibrary.Move.AttackValue">
            <summary>
            Valor del ataque del movimiento. Según el principio de "experto" (Expert), la clase <c>Move</c> es la responsable de conocer los valores de ataque 
            porque es quien posee los datos relacionados con cada movimiento.
            </summary>
        </member>
        <member name="P:ClassLibrary.Move.DefenseValue">
            <summary>
            Valor de defensa del movimiento. De nuevo, siguiendo el principio de "experto" (Expert), la clase <c>Move</c> conoce los valores de defensa 
            y tiene la responsabilidad de mantener estos valores encapsulados.
            </summary>
        </member>
        <member name="P:ClassLibrary.Move.CureValue">
            <summary>
            Valor de curación del movimiento. La clase <c>Move</c> sigue el principio de SRP al tener la responsabilidad de almacenar 
            solo los datos relacionados con el movimiento, dejando las acciones más complejas (como aplicar estos valores) a otras clases.
            </summary>
        </member>
        <member name="M:ClassLibrary.Move.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor de la clase <c>Move</c>. Inicializa los valores de nombre, ataque, defensa y curación.
            Esto sigue el principio de Liskov Substitution Principle (LSP) porque permite que cualquier clase derivada de <c>Move</c> (si la hubiera) 
            pueda sustituirse sin alterar el comportamiento de la lógica del juego.
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="defenseValue">El valor de defensa del movimiento.</param>
            <param name="cureValue">El valor de curación del movimiento.</param>
        </member>
        <member name="T:ClassLibrary.Pokemon">
            <summary>
            La clase Pokemon es responsable de encapsular los atributos y comportamientos específicos de un Pokémon.
            Aplica el principio de responsabilidad única (SRP) al gestionar exclusivamente los datos y comportamientos
            de cada Pokémon. Utiliza el patrón Expert, ya que conoce toda la información relevante para administrar
            sus atributos, como la salud y los movimientos. También permite aplicar polimorfismo y respetar el principio
            de sustitución de Liskov (LSP) si se crean subclases de Pokémon con comportamientos más especializados
            o específicos.
            </summary>
        </member>
        <member name="M:ClassLibrary.Pokemon.#ctor">
            <summary>
            Constructor que inicializa la lista de movimientos del Pokémon.
            </summary>
        </member>
        <member name="M:ClassLibrary.Pokemon.AddMove(ClassLibrary.Move)">
            <summary>
            Añade un movimiento a la lista de movimientos regulares del Pokémon.
            </summary>
            <param name="move">Movimiento a añadir a la lista de movimientos.</param>
        </member>
        <member name="T:ClassLibrary.PokemonCatalog">
             <summary>
             La clase PokemonCatalog tiene la responsabilidad de acceder a los atributos de los Pokémons y gestionar 
             un catálogo de Pokémons. Permite buscar un Pokémon por su nombre.
            
             Esta clase está separada para cumplir con el principio de responsabilidad única (SRP), ya que está especializada
             en conocer y gestionar únicamente el catálogo de Pokémons. Cualquier cambio en cómo se almacenan
             o gestionan los datos de los Pokémons se realizaría únicamente aquí.
             
             Tener esta clase como experta en la gestión del catálogo de Pokémons facilita futuras expansiones, como cambiar
             la forma de almacenar los datos, añadir nuevas formas de búsqueda o modificar la fuente del catálogo, minimizando 
             así las razones de cambio y centralizando la responsabilidad.
             </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalog.FindPokemonByName(System.String)">
            <summary>
            Encuentra un Pokémon por su nombre en el catálogo.
            Recorre la lista de Pokémon y devuelve el objeto correspondiente si encuentra una coincidencia.
            Si no encuentra el Pokémon, retorna null.
            </summary>
            <param name="pokemonName">Nombre del Pokémon a buscar.</param>
            <returns>El objeto Pokemon si se encuentra, de lo contrario null.</returns>
        </member>
        <member name="T:ClassLibrary.PokemonCatalogBuilder">
            <summary>
            La clase PokemonCatalogBuilder se encarga de la creación y configuración de un catálogo de Pokémon,
            gestionando la asignación de atributos y movimientos para cada Pokémon. 
            Aplica el principio de responsabilidad única (SRP) al dedicarse exclusivamente a construir el catálogo
            de Pokémon, separando la lógica de creación de los Pokémon del resto de la aplicación. 
            Utiliza el patrón Expert, ya que es la clase que mejor conoce cómo crear un Pokémon con sus movimientos
            y atributos. También sigue el principio de sustitución de Liskov (LSP), ya que puede ser extendida
            o modificada sin afectar el funcionamiento del catálogo en otras clases.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalogBuilder.#ctor">
            <summary>
            Constructor de la clase que inicializa y añade varios Pokémon al catálogo.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalogBuilder.AddPokemonToCatalog(System.String,System.Collections.Generic.List{ClassLibrary.Move},ClassLibrary.Move)">
            <summary>
            Método privado que añade un Pokémon al catálogo, asignando su nombre, lista de movimientos y movimiento especial.
            </summary>
            <param name="name">Nombre del Pokémon.</param>
            <param name="moves">Lista de movimientos del Pokémon.</param>
            <param name="specialMove">Movimiento especial del Pokémon.</param>
        </member>
        <member name="M:ClassLibrary.PokemonCatalogBuilder.GetPokemonList">
            <summary>
            Devuelve la lista de todos los Pokémon creados en el catálogo.
            </summary>
            <returns>Lista de Pokémon.</returns>
        </member>
    </members>
</doc>
