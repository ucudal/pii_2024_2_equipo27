<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Commands.AttackCommand">
            <summary>
            Esta clase implementa el comando 'attack' del bot. Este comando ejecuta un ataque
            usando un movimiento especificado por el usuario.
            </summary>
        </member>
        <member name="M:Library.Commands.AttackCommand.ExecuteAsync(System.String)">
            <summary>
            Esta clase implementa el comando 'attack'. Este comando realiza un ataque con el movimiento especificado.
            </summary>
        </member>
        <member name="T:Library.Commands.BattleCommand">
            <summary>
            Esta clase implementa el comando 'battle' del bot. Este comando une al
            jugador que envía el mensaje con el oponente que se recibe como parámetro,
            si lo hubiera, en una batalla; si no se recibe un oponente, lo une con
            cualquiera que esté esperando para jugar.
            </summary>
        </member>
        <member name="M:Library.Commands.BattleCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'battle'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Library.Commands.ChangeCommand">
            <summary>
            Esta clase implementa el comando 'change' del bot. Este comando permite al
            jugador cambiar su Pokémon activo por otro de su equipo.
            </summary>
        </member>
        <member name="M:Library.Commands.ChangeCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'change'. Este comando toma el nombre del nuevo
            Pokémon que el jugador desea usar como activo y actualiza la selección.
            </summary>
        </member>
        <member name="T:Library.Commands.ChooseCommand">
            <summary>
            Esta clase implementa el comando 'choose' del bot. Este comando permite al
            jugador seleccionar seis Pokémon para la batalla, separados por espacios.
            </summary>
        </member>
        <member name="M:Library.Commands.ChooseCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'choose'. Este comando toma una lista de seis nombres
            de Pokémon separados por espacios, los transforma en un array y pasa
            la información a la fachada para registrar la selección.
            </summary>
        </member>
        <member name="T:Library.Commands.HelpCommand">
            <summary>
            Esta clase implementa el comando 'help' del bot. 
            </summary>
        </member>
        <member name="M:Library.Commands.HelpCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'help'. Este comando muestra información sobre los comandos y cómo jugar el juego"
            </summary>
        </member>
        <member name="T:Library.Commands.HpCommand">
            <summary>
            Comando que muestra los HP de los Pokémon de ambos jugadores.
            </summary>
        </member>
        <member name="M:Library.Commands.HpCommand.ExecuteAsync">
            <summary>
            Ejecuta el comando 'hp' que muestra los HP de los Pokémon de ambos jugadores.
            </summary>
        </member>
        <member name="T:Library.Commands.InitCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Library.Commands.InitCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Library.Commands.JoinCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Library.Commands.JoinCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Library.Commands.LeaveCommand">
            <summary>
            Esta clase implementa el comando 'leave' del bot. Este comando remueve el
            jugador que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Library.Commands.LeaveCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'leave' del bot. Este comando remueve el jugador
            que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Library.Commands.MovesCommand">
            <summary>
            Comando que muestra los movimientos disponibles de los Pokémon del jugador
            </summary>
        </member>
        <member name="M:Library.Commands.MovesCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'moves'. Este comando muestra los movimientos disponibles del Pokémon actual del jugador.
            </summary>
        </member>
        <member name="T:Library.Commands.RulesCommand">
            <summary>
            Esta clase implementa el comando 'rules' del bot. 
            </summary>
        </member>
        <member name="M:Library.Commands.RulesCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'rules'. Este comando muestra información sobre las reglas del juego"
            </summary>
        </member>
        <member name="T:Library.Commands.TurnCommand">
            <summary>
            Esta clase implementa el comando 'turn' del bot. Este comando muestra de 
            quien es el turno
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Library.Commands.TurnCommand.ExecuteAsync" -->
        <member name="T:Library.Commands.WaitingCommand">
            <summary>
            Esta clase implementa el comando 'waitinglist' del bot. Este comando muestra
            la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Library.Commands.WaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'waitinglist'. Este comando muestra la lista de
            jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:ClassLibrary.Type">
            <summary>
            Enumeración que define los tipos de Pokémon.
            </summary>
        </member>
        <member name="T:ClassLibrary.EffectivenessTable">
            <summary>
            La clase <c>EffectivenessTable</c> es responsable de gestionar los tipos de Pokémon y su efectividad en combates.
            Aplica el principio de responsabilidad única (SRP) al enfocarse exclusivamente en la lógica de tipos y 
            efectividad de ataques entre tipos.
            Utiliza el patrón Expert, ya que posee toda la información necesaria para determinar la efectividad de los ataques
            entre tipos, promoviendo alta cohesión y bajo acoplamiento con otras clases.
            Además, sigue el principio abierto/cerrado (OCP), permitiendo agregar nuevos tipos o combinaciones de efectividad
            sin modificar la estructura de la clase.
            La robustez y seguridad de esta clase se aseguran al validar la existencia de combinaciones de tipos y evitar
            estados inválidos, facilitando la detección y manejo de errores en el uso de esta clase.
            </summary>
        </member>
        <member name="F:ClassLibrary.EffectivenessTable.typeEffectiveness">
            <summary>
            Diccionario que almacena la efectividad de los ataques entre tipos de Pokémon.
            La clave es una tupla que contiene el tipo del defensor y el tipo del atacante,
            y el valor es el multiplicador de daño asociado a esa combinación de tipos.
            </summary>
        </member>
        <member name="M:ClassLibrary.EffectivenessTable.GetEffectiveness(ClassLibrary.Type,ClassLibrary.Type)">
            <summary>
            Método que devuelve la efectividad entre tipos.
            </summary>
            <param name="defendingType">Tipo del Pokémon atacante.</param>
            <param name="attackingType">Tipo del Pokémon defensor.</param>
            <returns>
            El multiplicador de daño según la efectividad entre tipos. 
            Devuelve 1.0 si no hay ventaja o desventaja.
            </returns>
        </member>
        <member name="T:ClassLibrary.Facade">
            <summary>
            La clase  <c>Facade</c> proporciona una interfaz simplificada para interactuar con el juego, permitiendo a los jugadores seleccionar
            Pokémon, mostrar movimientos, activar ataques y consultar la salud de los Pokémon. Aplica el Patrón de Diseño Facade,
            que oculta la complejidad del sistema y simplifica la interacción con múltiples subsistemas, mejorando la usabilidad.
            Esta clase sigue el Principio de Responsabilidad Única (SRP) al concentrar la lógica de interacción en un solo lugar,
            lo que facilita el mantenimiento y la evolución del sistema. Esta estructura permite a los
            desarrolladores y jugadores interactuar con el juego de manera más intuitiva, minimizando la necesidad de conocer la
            implementación interna.
            </summary>
        </member>
        <member name="P:ClassLibrary.Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:ClassLibrary.Facade"/>.
            </summary>
        </member>
        <member name="M:ClassLibrary.Facade.Reset">
            <summary>
            Inicializa este singleton. Es necesario solo en los tests.
            </summary>
        </member>
        <member name="M:ClassLibrary.Facade.ShowPokemonCatalog">
            <summary>
            Muestra el catálogo completo de Pokémon disponibles para seleccionar en la partida.
            </summary>
            <returns>Un mensaje que contiene la lista de Pokémon disponibles en el catálogo.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClassLibrary.Facade.ChoosePokemons(System.String,System.String[])" -->
        <member name="M:ClassLibrary.Facade.ShowMoves(System.String)">
            <summary>
            Muestra los movimientos disponibles de los Pokémon del jugador seleccionado.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <returns>Una lista de cadenas con los Pokémon y sus movimientos.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.ShowPlayerItems(System.String)">
            <summary>
            Muestra los ítems disponibles del jugador y sus cantidades.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <returns>Un mensaje con la lista de ítems y sus cantidades.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.ChooseMoveToAttack(System.String,System.String)">
            <summary>
            Permite a un jugador seleccionar un Pokémon y un movimiento para atacar.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <param name="moveName">El nombre del movimiento a utilizar.</param>
            <param name="pokemonName">El nombre del Pokémon que realizará el ataque.</param>
        </member>
        <member name="M:ClassLibrary.Facade.GetPokemonsHealth(System.String)">
            <summary>
            Obtiene la salud de los Pokémon de un jugador y su oponente, formateada en una cadena.
            </summary>
            <param name="playerDisplayName">El nombre del jugador del cual se obtendrá la salud de los Pokémon.</param>
            <returns>Una cadena que contiene la información de la salud de los Pokémon del jugador y su oponente.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si el jugador o el oponente no se encuentran.</exception>
        </member>
        <member name="M:ClassLibrary.Facade.PlayerAttack(System.String)">
            <summary>
            Realiza un ataque en el turno del jugador, aplicando el daño basado en la efectividad del tipo.
            </summary>
            <param name="attackerName">El nombre del jugador atacante.</param>
            <param name="defenderName">El nombre del jugador defensor.</param>
            <param name="moveName">El nombre del movimiento seleccionado para el ataque.</param>
            <returns>Un mensaje con el resultado del ataque.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.GetCurrentTurnPlayer(System.String)">
            <summary>
            Obtiene el nombre del jugador que tiene el turno actual en la partida en la que se encuentra el jugador especificado.
            Verifica si el jugador está en una partida activa y, de ser así, devuelve el nombre del jugador cuyo turno está en curso.
            </summary>
            <param name="playerDisplayName">El nombre del jugador para buscar su partida.</param>
            <returns>Un mensaje que indica el nombre del jugador con el turno actual o un mensaje de error si el jugador no está en una partida.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.EndGame(ClassLibrary.Game)">
            <summary>
            Finaliza la batalla y muestra un mensaje indicando si el juego ha terminado o si la batalla sigue en curso.
            Verifica el estado de los Pokémon disponibles del jugador y maneja el flujo de finalización de la batalla.
            </summary>
            <param name="userInterface">La instancia de la interfaz de usuario que muestra los mensajes al jugador.</param>
            <param name="game">El objeto del juego que contiene la lógica para determinar si la batalla ha terminado.</param>
            <param name="player">El jugador que está participando en la batalla.</param>
            <param name="playerDisplayName">El nombre para mostrar del jugador, usado para personalizar los mensajes.</param>
            <returns>Un mensaje que indica si la batalla ha terminado o si la batalla continúa.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si la batalla continúa y el jugador tiene solo un Pokémon disponible.</exception>
        </member>
        <member name="M:ClassLibrary.Facade.ChangePokemon(System.String,System.String)">
            <summary>
            Cambia el Pokémon activo del jugador al especificado por <paramref name="newPokemonName"/> y pierde su turno.
            </summary>
            <param name="playerDisplayName">Nombre del jugador que quiere cambiar de Pokémon.</param>
            <param name="newPokemonName">Nombre del nuevo Pokémon a activar.</param>
            <returns>Un mensaje formateado indicando el cambio de Pokémon y la pérdida de turno.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si el jugador no está en la partida o si el Pokémon no está disponible.</exception>
            <exception cref="T:System.ArgumentNullException">Se lanza si <paramref name="playerDisplayName"/> o <paramref name="newPokemonName"/> son nulos o están vacíos.</exception>
        </member>
        <member name="M:ClassLibrary.Facade.PlayerUseItem(System.String,System.String)">
            <summary>
            Permite que un jugador use un ítem específico en su Pokémon activo dentro de una partida.
            La función busca al jugador por su nombre, verifica que esté en la partida y que tenga un Pokémon activo
            para aplicar el ítem. Si es válido, aplica el efecto del ítem al Pokémon.
            </summary>
            <param name="playerDisplayName">El nombre del jugador que intenta usar el ítem.</param>
            <param name="itemName">El nombre del ítem que el jugador intenta usar.</param>
            <returns>Un mensaje que indica si el jugador usó el ítem con éxito, el efecto del ítem o cualquier error.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.AddPlayerToWaitingList(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.RemovePlayerFromWaitingList(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El jugador a remover.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.GetAllPlayersWaiting">
            <summary>
            Obtiene la lista de jugadores esperando.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.PlayerIsWaiting(System.String)">
            <summary>
            Determina si un jugador está esperando para jugar.
            </summary>
            <param name="displayName">El jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:ClassLibrary.Facade.StartBattle(System.String,System.String)">
            <summary>
            Crea una batalla entre dos jugadores.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="opponentDisplayName">El oponente.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:ClassLibrary.Game">
            <summary>
             La clase <c>Game</c> tiene la responsabilidad de conocer a los jugadores y verificar si el juego está activo o ha terminado.
             Esto sigue el principio de responsabilidad única (SRP) ya que su única función es gestionar el estado del juego.
             Además, según el principio de "experto" (Expert), la clase <c>Game</c> es la más adecuada para gestionar estas tareas,
             ya que contiene toda la información sobre los jugadores y el estado del juego.
            </summary>
        </member>
        <member name="M:ClassLibrary.Game.#ctor(ClassLibrary.Player,ClassLibrary.Player)">
            <summary>
             Constructor de la clase <c>Game</c>. Inicializa los jugadores y el estado del juego.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El segundo jugador.</param>
        </member>
        <member name="P:ClassLibrary.Game.Player1">
            <summary>
             Propiedad que almacena al jugador 1 del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.Player2">
            <summary>
             Propiedad que almacena al jugador 2 del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.Turn">
            <summary>
             Instancia de la clase Turn para gestionar el turno actual del juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.TurnPlayer">
            <summary>
             Propiedad que indica el jugador que actualmente tiene el turno.
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.PlayIsOn">
            <summary>
            Propiedad que indica si el juego sigue activo (true) o ha terminado (false).
            </summary>
        </member>
        <member name="P:ClassLibrary.Game.Winner">
            <summary>
            Propiedad que indica el jugdor que ganó la partida. 
            </summary>
        </member>
        <member name="M:ClassLibrary.Game.CheckIfGameEnds">
            <summary>
            Verifica si el juego debe terminar revisando si todos los Pokémon de alguno de los jugadores tienen 0 puntos de vida.
            Si un jugador pierde todos sus Pokémon, el juego termina y se declara un ganador.
            </summary>
        </member>
        <member name="T:ClassLibrary.GameList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="P:ClassLibrary.GameList.Games">
            <summary>
            Obtiene una lista de juegos como solo lectura.
            </summary>
        </member>
        <member name="M:ClassLibrary.GameList.AddGame(ClassLibrary.Player,ClassLibrary.Player)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="M:ClassLibrary.GameList.FindPlayerByDisplayName(System.String)">
            <summary>
            Encuentra un jugador por su nombre para una batalla en curso.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>El objeto Player si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="M:ClassLibrary.GameList.FindOpponentOfDisplayName(System.String)">
            <summary>
            Encuentra un jugador por el nombre de su oponente para una batalla en curso.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>El objeto Player si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="M:ClassLibrary.GameList.FindGameByPlayerDisplayName(System.String)">
            <summary>
            Encuentra una battala por el nombre de uno de sus jugadores.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns> El objeto Game si se encuentra; de lo contrario, null.</returns>
        </member>
        <member name="T:ClassLibrary.IRandom">
            <summary>
            Define una interfaz para generar números, que puede ser aleatorio o constante.
            </summary>
        </member>
        <member name="M:ClassLibrary.IRandom.Generate">
            <summary>
            Genera un número según la implementación.
            </summary>
            <returns>Un número generado.</returns>
        </member>
        <member name="T:ClassLibrary.Player">
            <summary>
            La clase  <c>Player</c> representa a un jugador en el juego, 
            responsable de gestionar los Pokémon disponibles, el Pokémon activo
            y el movimiento activo del jugador.
            </summary>
        </member>
        <member name="P:ClassLibrary.Player.DisplayName">
            <summary>               
            Obtiene el nombre para mostrar del jugador.
            </summary>
        </member>
        <member name="M:ClassLibrary.Player.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase Player con el nombre especificado.
            </summary>
            <param name="displayName">Nombre del jugador para mostrar en el juego.</param>
        </member>
        <member name="P:ClassLibrary.Player.AvailablePokemons">
            <summary>
            Obtiene la lista de Pokémon disponibles para el jugador.
            </summary>
        </member>
        <member name="P:ClassLibrary.Player.ActivePokemon">
            <summary>
            El Pokémon activo del jugador.
            </summary>
        </member>
        <member name="P:ClassLibrary.Player.ActiveMove">
            <summary>
            El movimiento actualmente activo del Pokémon del jugador.
            </summary>
        </member>
        <member name="P:ClassLibrary.Player.Opponent">
            <summary>
            El oponente del jugador.
            </summary>
        </member>
        <member name="M:ClassLibrary.Player.AddPokemon(ClassLibrary.Pokemon)">
            <summary>
            Agrega un Pokémon a la lista de Pokémon disponibles para el jugador.
            </summary>
            <param name="pokemon">El Pokémon a agregar a la lista.</param>
        </member>
        <member name="M:ClassLibrary.Player.GetIndexOfPokemon(System.String)">
            <summary>
            Obtiene el índice de un Pokémon en la lista de Pokémon disponibles
            según su nombre para mostrar.
            </summary>
            <param name="pokemonDisplayName">Nombre del Pokémon a buscar.</param>
            <returns>Índice del Pokémon en la lista o -1 si no se encuentra.</returns>
        </member>
        <member name="M:ClassLibrary.Player.ActivatePokemon(System.Int32)">
            <summary>
            Activa un Pokémon de la lista disponible en base a su índice.
            </summary>
            <param name="index">Índice del Pokémon en la lista de disponibles.</param>
        </member>
        <member name="M:ClassLibrary.Player.GetIndexOfMoveInActivePokemon(System.String)">
            <summary>
            Obtiene el índice de un movimiento en el Pokémon activo 
            según el nombre del movimiento.
            </summary>
            <param name="moveDisplayName">Nombre del movimiento a buscar.</param>
            <returns>Índice del movimiento en la lista de movimientos del Pokémon activo o -1 si no se encuentra.</returns>
        </member>
        <member name="M:ClassLibrary.Player.ActivateMoveInActivePokemon(System.Int32)">
            <summary>
            Activa un movimiento en el Pokémon activo en base a su índice en la lista de movimientos.
            </summary>
            <param name="index">Índice del movimiento en la lista de movimientos del Pokémon activo.</param>
        </member>
        <member name="M:ClassLibrary.Player.GetItemsWithQuantities">
            <summary>
            Devuelve los ítems disponibles y sus cantidades.
            </summary>
            <returns>Un diccionario con los nombres de los ítems y sus cantidades.</returns>
        </member>
        <member name="M:ClassLibrary.Player.CheckAndAssignNextActivePokemon">
            <summary>
            Verifica si el Pokémon activo está vivo (HealthPoints > 0) y no está dormido.
            Si no cumple estas condiciones, asigna el próximo Pokémon disponible que las cumpla.
            </summary>
        </member>
        <member name="M:ClassLibrary.Player.TurnChanged">
            <summary>
            Actualiza el estado de los Pokémon disponibles del jugador al cambiar de turno.
            </summary>
            <remarks>
            Recorre la lista de Pokémon disponibles y, si un Pokémon está quemado (<see cref="P:ClassLibrary.Pokemon.IsBurned"/>),
            reduce sus puntos de salud en un 10%.
            </remarks>
        </member>
        <member name="T:ClassLibrary.RandomGenerator">
            <summary>
            Implementación de IRandom que genera números aleatorios.
            </summary>
        </member>
        <member name="T:ClassLibrary.Turn">
            <summary>
            Esta clase conoce las especificaciones del turno de un jugador actual con sus correspondientes ataques.
            </summary>
        </member>
        <member name="F:ClassLibrary.Turn.CurrentPlayer">
            <summary>
            Jugador que está actualmente en turno.
            </summary>
        </member>
        <member name="F:ClassLibrary.Turn.WaitingPlayer">
            <summary>
            Jugador que está esperando su turno.
            </summary>
        </member>
        <member name="M:ClassLibrary.Turn.#ctor(ClassLibrary.Player,ClassLibrary.Player)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Turn"/> con dos jugadores.
            </summary>
            <remarks>
            <see cref="T:ClassLibrary.Player"/> es la clase que representa a un jugador en el juego.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Turn.ChangeTurn">
            <summary>
            Cambia el turno entre el jugador actual y el jugador en espera.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:ClassLibrary.Turn.PenalizeTurn(ClassLibrary.Player)">
            <summary>
            Penaliza el turno de un jugador. Si el jugador penalizado es el actual, se cambia el turno.
            </summary>
            <remarks>
            Se debe validar que el parámetro no sea nulo antes de usarlo.
            </remarks>
        </member>
        <member name="T:ClassLibrary.UserInterface">
            <summary>
            La clase <c>UserInterface</c> es responsable de construir y devolver mensajes 
            formateados para la interfaz de usuario, proporcionando la información necesaria sobre
            el juego, para interactuar con el usuario en el chatbot.
            La clase se encarga exclusivamente de generar y mostrar mensajes que se utilizan para
            informar al usuario sobre el estado del juego, manteniéndose concentrada en esta responsabilidad
            sin realizar ninguna lógica del juego, por lo que cumple con el patrón de Responsabilidad Única(SRP)
            También esta clase es la "experta" en formatear y construir mensajes para la interfaz de
            usuario, ya que es la única que conoce el formato y contenido de los mensajes que se deben mostrar,
            por lo que sigue el patrón Expert.
            </summary>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessagePokemonCatalog">
            <summary>
            Genera un mensaje con el catálogo de todos los Pokémon disponibles.
            </summary>
            <returns>Una cadena con el catálogo de nombres de Pokémon.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageToAddPokemons(System.Int32)">
            <summary>
            Genera un mensaje indicando el número del Pokémon a seleccionar o informa que ya se han seleccionado los 6 Pokémon.
            </summary>
            <param name="currentSelection">El índice actual de selección de Pokémon.</param>
            <returns>Un mensaje indicando el número de selección de Pokémon o que ya se completó la selección.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageSelectedPokemons(System.Collections.ObjectModel.ReadOnlyCollection{ClassLibrary.Pokemon})">
            <summary>
            Genera un mensaje con la lista de Pokémon seleccionados por el jugador.
            </summary>
            <param name="selectedPokemons">Lista de Pokémon seleccionados.</param>
            <returns>Un mensaje con los nombres de los Pokémon seleccionados.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessagePokemonHealth(System.Collections.ObjectModel.ReadOnlyCollection{ClassLibrary.Pokemon},System.Collections.ObjectModel.ReadOnlyCollection{ClassLibrary.Pokemon})">
            <summary>
            Genera un mensaje con la información de salud de los Pokémon del jugador y del oponente.
            </summary>
            <param name="playerPokemons">Lista de Pokémon del jugador.</param>
            <param name="opponentPokemons">Lista de Pokémon del oponente.</param>
            <returns>Una cadena con la información de salud de los Pokémon.</returns>
            <exception cref="T:System.ArgumentNullException">Se lanza si alguna de las listas es nula.</exception>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageChangePokemon(System.String,System.String)">
            <summary>
            Genera un mensaje indicando que el jugador ha cambiado su Pokémon activo y ha perdido su turno.
            </summary>
            <param name="playerDisplayName">Nombre del jugador que realizó el cambio de Pokémon.</param>
            <param name="newPokemonName">Nombre del nuevo Pokémon activado.</param>
            <returns>Mensaje formateado indicando el cambio de Pokémon y la pérdida de turno.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageNoPlayersWaiting">
            <summary>
            Genera un mensaje indicando que no hay jugadores en la lista de espera.
            </summary>
            <returns>Mensaje indicando que no hay nadie esperando.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessagePlayersWaiting(System.Collections.ObjectModel.ReadOnlyCollection{ClassLibrary.Player})">
            <summary>
            Genera un mensaje listando los nombres de los jugadores en la lista de espera.
            </summary>
            <param name="waitingPlayers">Lista de jugadores en espera.</param>
            <returns>Un mensaje con los nombres de los jugadores en espera.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageAttackOcurred(ClassLibrary.Pokemon,ClassLibrary.Pokemon,ClassLibrary.Player,ClassLibrary.Player)">
            <summary>
            Muestra un mensaje indicando que un ataque ha ocurrido, con detalles sobre el atacante, el defensor y el movimiento usado.
            </summary>
            <param name="attackingPokemon">El Pokémon que está atacando.</param>
            <param name="defendingPokemon">El Pokémon que está siendo atacado.</param>
            <param name="attacker">El jugador que controla al Pokémon atacante.</param>
            <param name="defender">El jugador que controla al Pokémon defensor.</param>
            <returns>Un mensaje formateado indicando que el ataque ocurrió.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageAttackDidNotOccur(ClassLibrary.Player,ClassLibrary.Pokemon)">
            <summary>
            Muestra un mensaje indicando que el ataque no ocurrió, debido a que el Pokémon del jugador tiene un ataque especial activo que lo impide.
            </summary>
            <param name="attacker">El jugador que intenta realizar el ataque.</param>
            <param name="attackingPokemon">El Pokémon que está intentando atacar.</param>
            <returns>Un mensaje formateado indicando que el ataque no ocurrió debido a un movimiento especial activo.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageHighEffectiveness(System.Double)">
            <summary>
            Muestra un mensaje que la efectividad del ataque fue alta.
            </summary>
            <param name="attacker">El jugador que intenta realizar el ataque.</param>
            <param name="attackingPokemon">El Pokémon que está intentando atacar.</param>
            <returns>Un mensaje formateado indicando la efectividad.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageLowEffectiveness(System.Double)">
            <summary>
            Muestra un mensaje indicando que la efectividad del mensaje fue baja.
            </summary>
            <param name="attacker">El jugador que intenta realizar el ataque.</param>
            <param name="attackingPokemon">El Pokémon que está intentando atacar.</param>
            <returns>Un mensaje formateado indicando la efectividad.</returns>
        </member>
        <member name="M:ClassLibrary.UserInterface.ShowMessageHelp">
            <summary>
            Retorna un mensaje con todos los comandos disponibles y las reglas del juego.
            </summary>
        </member>
        <member name="M:ClassLibrary.UserInterface.ReturnShowMoves(System.Collections.Generic.IReadOnlyList{ClassLibrary.Move},ClassLibrary.Player)">
            <summary>
            Devuelve un string que muestra los movimientos de los Pokémon de forma detallada.
            </summary>
        </member>
        <member name="T:ClassLibrary.WaitingList">
            <summary>
            La clase <c>WaitingList</c> es responsable de gestionar la lista de jugadores en espera para jugar.
            Aplica el principio de responsabilidad única (SRP) al enfocarse exclusivamente en las operaciones
            relacionadas con la lista de espera de jugadores, como agregar, remover y buscar.
            Utiliza el patrón Expert, ya que posee toda la información necesaria para manejar la lista
            de jugadores de manera eficiente, promoviendo una alta cohesión.
            Además, está diseñada para ser extensible en el futuro, siguiendo el principio abierto/cerrado (OCP),
            permitiendo, por ejemplo, la selección de un jugador aleatorio sin modificar la estructura básica.
            La clase mantiene su robustez y seguridad al validar las entradas y evitar estados inválidos.
            </summary>
        </member>
        <member name="M:ClassLibrary.WaitingList.AddPlayer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="DisplayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:ClassLibrary.WaitingList.RemovePlayer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="DisplayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:ClassLibrary.WaitingList.FindPlayerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="DisplayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:ClassLibrary.WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Item">
            <summary>
            La clase <c>Item</c> representa un ítem genérico utilizado en el contexto del juego y se enfoca exclusivamente
            en modelar las propiedades y el comportamiento básico de un ítem, cumpliendo así con el principio de
            Responsabilidad Única (SRP). Actúa como una clase base abstracta que establece una estructura común para
            todos los ítems, permitiendo que las subclases definan comportamientos específicos mediante la sobrescritura
            del método abstracto <c>ApplyEffect</c>. Este método aplica el efecto del ítem a un Pokémon determinado, y su diseño
            sigue el principio de Sustitución de Liskov (LSP), ya que las subclases pueden extenderlo sin alterar el contrato
            general de la clase. Además, el diseño de la clase refleja el patrón de Template Method, ya que el método abstracto
            sirve como una plantilla que las subclases deben implementar según su funcionalidad específica. Con estas
            características, la clase <c>Item</c> proporciona una base sólida y extensible para la creación de diferentes tipos
            de ítems en el juego.
            </summary>
        </member>
        <member name="P:ClassLibrary.Item.Name">
            <summary>
            Propiedad que almacena el nombre del ítem.
            </summary>
        </member>
        <member name="M:ClassLibrary.Item.#ctor(System.String)">
            <summary>
            Constructor de la clase <c>Item</c>.
            Inicializa el ítem con un nombre específico.
            </summary>
            <param name="name">Nombre del ítem.</param>
        </member>
        <member name="M:ClassLibrary.Item.ApplyEffect(ClassLibrary.Pokemon)">
            <summary>
            Aplica el efecto del ítem en el Pokémon especificado.
            Este método está diseñado para ser sobrescrito por subclases que implementen efectos específicos.
            </summary>
            <param name="pokemon">El Pokémon al que se aplicará el efecto del ítem.</param>
            <returns>Un mensaje que indica el resultado de aplicar el efecto.</returns>
        </member>
        <member name="T:ClassLibrary.ItemFullHeal">
            <summary>
            La clase <c>ItemFullHeal</c> hereda de <c>Item</c> y representa un ítem que cura completamente a un Pokémon,
            restaurando sus puntos de salud y eliminando cualquier estado alterado.
            Cumple con el principio de responsabilidad única (SRP), ya que su única función es manejar la lógica relacionada
            con la curación total de un Pokémon.
            La implementación del método <c>ApplyEffect</c> utiliza el patrón de diseño Strategy, permitiendo la personalización
            del comportamiento del ítem sin afectar otras partes del sistema. También sigue el principio de Sustitución de Liskov (LSP),
            ya que sobrescribe el comportamiento de la clase base <c>Item</c> respetando su contrato.
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemFullHeal.#ctor">
            <summary>
            Constructor de la clase <c>CompleteCure</c> que inicializa el ítem con el nombre "Cura total".
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemFullHeal.ApplyEffect(ClassLibrary.Pokemon)">
            <summary>
            Aplica el efecto de curación completa y eliminación de estados alterados a un Pokémon.
            </summary>
            <param name="pokemon">El Pokémon al que se le aplicará la cura completa.</param>
            <returns>Un mensaje que indica que el Pokémon ha sido curado completamente.</returns>
            <exception cref="T:System.Exception">Se lanza una excepción si no se pasa un Pokémon válido.</exception>
        </member>
        <member name="T:ClassLibrary.ItemRevive">
            <summary>
            La clase <c>ItemRevive</c> hereda de <c>Item</c> y representa un ítem que revive a un Pokémon debilitado,
            restaurándole una cantidad limitada de puntos de vida.
            Cumple con el principio de responsabilidad única (SRP) ya que su única tarea es manejar la lógica específica
            de revivir un Pokémon. Este diseño encapsula esta funcionalidad de manera clara y separada.
            La implementación del método <c>ApplyEffect</c> utiliza el patrón de diseño Strategy para definir un comportamiento
            personalizado en comparación con otros ítems. Además, sigue el principio de Sustitución de Liskov (LSP),
            sobrescribiendo el método de la clase base <c>Item</c> respetando su contrato.
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemRevive.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.ItemRevive"/> con el nombre del ítem establecido como "Revivir".
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemRevive.ApplyEffect(ClassLibrary.Pokemon)">
            <summary>
            Aplica el efecto de la <c>ItemRevive</c> al Pokémon especificado. Si el Pokémon está debilitado (con puntos de vida iguales a cero),
            lo revive restaurando 50 puntos de vida. Si el Pokémon ya tiene puntos de vida, no se puede aplicar el efecto.
            </summary>
            <param name="pokemon">El Pokémon al que se le aplicará el ítem.</param>
            <returns>Un mensaje indicando el resultado de la aplicación del ítem.</returns>
        </member>
        <member name="T:ClassLibrary.ItemSuperPotion">
            <summary>
            La clase <c>ItemSuperPotion</c> hereda de <c>Item</c> y representa un ítem que restaura puntos de vida
            a un Pokémon, utilizando una cantidad fija de curación.
            Cumple con el principio de responsabilidad única (SRP) al encargarse exclusivamente de modelar el efecto de curación
            proporcionado por la super poción. Este diseño facilita su mantenimiento y reutilización.
            La implementación sobrescribe el método <c>ApplyEffect</c>, utilizando el patrón de diseño Strategy para definir
            un comportamiento específico para este ítem en comparación con otros. Además, sigue el principio de Sustitución de Liskov (LSP),
            permitiendo que las subclases puedan ser usadas donde se espere un <c>Item</c> sin romper el comportamiento del sistema.
            </summary>
        </member>
        <member name="F:ClassLibrary.ItemSuperPotion.HealingAmount">
            <summary>
            Cantidad de puntos de vida que restaura la super poción.
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemSuperPotion.#ctor">
            <summary>
            Constructor de la clase <c>SuperPocion</c> que inicializa el ítem con el nombre "SuperPocion".
            </summary>
        </member>
        <member name="M:ClassLibrary.ItemSuperPotion.ApplyEffect(ClassLibrary.Pokemon)">
            <summary>
            Aplica el efecto de la super poción, aumentando los puntos de vida del Pokémon.
            </summary>
            <param name="pokemon">El Pokémon al que se le aplicará la super poción.</param>
            <returns>Un mensaje que indica la cantidad de puntos de vida restaurados.</returns>
            <exception cref="T:System.Exception">Se lanza una excepción si no se pasa un Pokémon válido.</exception>
        </member>
        <member name="T:ClassLibrary.Move">
            <summary>
            La clase <c>Move</c> debe ser abstracta porque define la estructura y atributos básicos de todos los ataques en el
            sistema de batallas, sin representar un movimiento específico por sí sola. Según el principio de responsabilidad única,
            <c>Move</c> organiza los elementos comunes (como el nombre y precisión) y delega a sus subclases <c>MoveParalize</c>, <c>MoveSleep</c>,
            <c>MovePosion</c> <c>MoveBurn</c> <c>MoveNormal</c> la implementación de efectos específicos, asegurando que cada ataque cumpla
            su función particular sin duplicar código. Hicimos uso del patrón de diseño Strategy que permite diferentes estrategias de implementación
            de un mismo método. Además, el diseño sigue los principios de Liskov y Abierto/Cerrado, permitiendo la adición de nuevos tipos de movimientos
            sin modificar la estructura base, lo cual favorece un sistema extensible y polimórfico. 
            </summary>
        </member>
        <member name="P:ClassLibrary.Move.Name">
            <summary>
            Nombre del movimiento.
            </summary>
        </member>
        <member name="F:ClassLibrary.Move._moveType">
            <summary>
            Obtiene o establece el tipo del Ataque.
            </summary>
        </member>
        <member name="F:ClassLibrary.Move._attackValue">
            <summary>
            Valor del ataque del movimiento.
            </summary>
        </member>
        <member name="F:ClassLibrary.Move._accuracy">
            <summary>
            El valor de precisión define la probabilidad de que el ataque se ejecute.
            </summary>
        </member>
        <member name="M:ClassLibrary.Move.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase.
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.Move.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Método para aplicar el ataque considerando ambos pokemones y el valor de golpe crítico.
            </summary>
            <param name="attacker">El pokemon que está atacando.</param>
            <param name="target">El pokemon que está siendo atacado.</param>
            <param name="criticalHit">El valor de golpe crítico, que es 1.20 o 1 por default.</param>
        </member>
        <member name="M:ClassLibrary.Move.GenerateNumber">
            <summary>
            Genera un número usando el generador asociado a este movimiento.
            </summary>
            <returns>Un número generado.</returns>
        </member>
        <member name="T:ClassLibrary.MoveBurn">
            <summary>
            <c>MoveBurn</c> es una subclase de <c>Move</c> cuya responsabilidad principal es infligir daño al objetivo y,
            adicionalmente, aplicar un efecto de quemadura.
            </summary>
            
        </member>
        <member name="M:ClassLibrary.MoveBurn.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase <c>MoveBurn</c>. 
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de la precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.MoveBurn.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Ejecuta un movimiento de ataque de un Pokémon a otro, infligiendo daño y aplicando efectos secundarios.
            </summary>
            <param name="attacker">El Pokémon que realiza el ataque.</param>
            <param name="target">El Pokémon que recibe el ataque.</param>
            <param name="criticalHit">
            Factor de golpe crítico aplicado al daño base. Usualmente es 1.20 para golpes críticos o 1 por defecto.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se lanza si <paramref name="attacker"/> o <paramref name="target"/> es nulo.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si el valor de ataque del movimiento (<see cref="!:AttackValue"/>) es menor o igual a cero.
            </exception>
        </member>
        <member name="T:ClassLibrary.MoveNormal">
            <summary>
            La clase <c>NormalMove</c>, hereda de <c>Move</c> y es responsables de implementar su propia
            lógica en el método `ExecuteMove`, inflingiendo daño directo al Pokémon objetivo sin efectos secundarios adicionales.
            </summary>
        </member>
        <member name="M:ClassLibrary.MoveNormal.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase <c>MoveNormal</c>. 
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de la precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.MoveNormal.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Ejecuta un movimiento de ataque de un Pokémon a otro, infligiendo daño y aplicando efectos secundarios.
            </summary>
            <param name="attacker">El Pokémon que realiza el ataque.</param>
            <param name="target">El Pokémon que recibe el ataque.</param>
            <param name="criticalHit">
            Factor de golpe crítico aplicado al daño base. Usualmente es 1.20 para golpes críticos o 1 por defecto.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se lanza si <paramref name="attacker"/> o <paramref name="target"/> es nulo.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si el valor de ataque del movimiento (<see cref="!:AttackValue"/>) es menor o igual a cero.
            </exception>
        </member>
        <member name="T:ClassLibrary.MoveParalize">
            <summary>
            <c>MoveParalize</c> es una subclase de <c>Move</c> encargada de implementar el movimiento que causa
            parálisis en el Pokémon objetivo. Su responsabilidad principal es aplicar daño según la
            lógica de efectividad de tipos y, adicionalmente, verificar si el objetivo no está ya
            paralizado; si no lo está, establece su estado de parálisis en verdadero.
            </summary>
        </member>
        <member name="M:ClassLibrary.MoveParalize.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase <c>MoveParalize</c>. 
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de la precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.MoveParalize.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Ejecuta un movimiento de ataque de un Pokémon a otro, infligiendo daño y aplicando efectos secundarios.
            </summary>
            <param name="attacker">El Pokémon que realiza el ataque.</param>
            <param name="target">El Pokémon que recibe el ataque.</param>
            <param name="criticalHit">
            Factor de golpe crítico aplicado al daño base. Usualmente es 1.20 para golpes críticos o 1 por defecto.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se lanza si <paramref name="attacker"/> o <paramref name="target"/> es nulo.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si el valor de ataque del movimiento (<see cref="!:AttackValue"/>) es menor o igual a cero.
            </exception>
        </member>
        <member name="T:ClassLibrary.MovePoison">
            <summary>
            <c>MovePoison</c> es una subclase de <c>Move</c> cuyo objetivo es aplicar daño al Pokémon objetivo y,
            además, envenenarlo. Su responsabilidad principal, aplicando el polimorfismo, es calcular el daño basado en la
            efectividad de tipos y luego aplicar el estado de envenenamiento al objetivo, estableciendo
            la propiedad IsPoisoned como true. Esto permite que el veneno sea un efecto persistente que
            afecta al objetivo en el futuro. 
            </summary>
        </member>
        <member name="M:ClassLibrary.MovePoison.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase <c>MovePoison</c>. 
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de la precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.MovePoison.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Ejecuta un movimiento de ataque de un Pokémon a otro, infligiendo daño y aplicando efectos secundarios.
            </summary>
            <param name="attacker">El Pokémon que realiza el ataque.</param>
            <param name="target">El Pokémon que recibe el ataque.</param>
            <param name="criticalHit">
            Factor de golpe crítico aplicado al daño base. Usualmente es 1.20 para golpes críticos o 1 por defecto.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se lanza si <paramref name="attacker"/> o <paramref name="target"/> es nulo.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si el valor de ataque del movimiento (<see cref="!:AttackValue"/>) es menor o igual a cero.
            </exception>
        </member>
        <member name="T:ClassLibrary.MoveSleep">
            <summary>
            <c>MoveSleep</c> es una subclase de <c>ove</c> que se encarga de infligir daño al Pokémon objetivo y, adicionalmente,
            inducirlo al sueño. Después de calcular el daño con base en la efectividad del tipo y aplicar el daño
            correspondiente, establece un número aleatorio de turnos de sueño mediante la propiedad SleepTurns del
            Pokémon objetivo. Su responsabilidad es la de causar que el Pokémon objetivo duerma por un número determinado
            de turnos, lo que puede afectar su capacidad para actuar en turnos posteriores. Este comportamiento sigue el
            principio de responsabilidad única, gestionando exclusivamente el estado de sueño, sin interferir con otros 4
            efectos de estado o tipos de movimientos.
            </summary>
        </member>
        <member name="M:ClassLibrary.MoveSleep.#ctor(System.String,System.Int32,System.Double,ClassLibrary.Type)">
            <summary>
            Constructor de la clase <c>MoveSleep</c>. 
            </summary>
            <param name="name">El nombre del movimiento.</param>
            <param name="attackValue">El valor de ataque del movimiento.</param>
            <param name="accuracy">El valor de la precisión del movimiento.</param>
        </member>
        <member name="M:ClassLibrary.MoveSleep.ExecuteMove(ClassLibrary.Pokemon,ClassLibrary.Pokemon,System.Double)">
            <summary>
            Ejecuta un movimiento de ataque de un Pokémon a otro, infligiendo daño y aplicando efectos secundarios.
            </summary>
            <param name="attacker">El Pokémon que realiza el ataque.</param>
            <param name="target">El Pokémon que recibe el ataque.</param>
            <param name="criticalHit">
            Factor de golpe crítico aplicado al daño base. Usualmente es 1.20 para golpes críticos o 1 por defecto.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se lanza si <paramref name="attacker"/> o <paramref name="target"/> es nulo.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si el valor de ataque del movimiento (<see cref="!:AttackValue"/>) es menor o igual a cero.
            </exception>
        </member>
        <member name="T:ClassLibrary.Pokemon">
            <summary>
            La clase  <c>Pokemon</c> es responsable de encapsular los atributos y comportamientos específicos de un Pokémon.
            La clase Pokemon sigue los principios de diseño orientado a objetos, como el Principio de Responsabilidad Única y
            al centrarse en gestionar el estado y las interacciones de un Pokémon en combate. Maneja atributos como puntos de salud,
            movimientos y efectos de estado (veneno, quemado, parálisis y sueño), y valida que estos no se modifiquen de manera inapropiada
            con excepciones y restricciones implementadas. Esas restricciones son como la cantidad máxima de movimientos y la validación
            de estados, aseguran que el Pokémon funcione de acuerdo con las reglas del juego de manera coherente y extensible.
            Además, el encapsulamiento permite que las propiedades puedan ser modificadas cuando se cumplen ciertas condiciones. 
            </summary>
        </member>
        <member name="M:ClassLibrary.Pokemon.#ctor(ClassLibrary.Move[])">
            <summary>
            Inicializa una nueva instancia de la clase <c>Pokemon</c> con una lista de movimientos vacía.
            <param name="moves">Arreglo de movimientos del Pokémon. Debe contener exactamente 4 movimientos.</param>
            <exception cref="T:ClassLibrary.PokemonException">Se lanza si no se proporcionan exactamente 4 movimientos.</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.IsPoisoned">
            <summary>
            Obtiene o establece si un Pokémon está envenenado.
            Si el Pokémon ya está envenenado, no puede ser afectado por otro estado (quemado, paralizado, dormido).
            <exception cref="T:ClassLibrary.PokemonException">Se lanza si el Pokémon ya está afectado por otro estado (quemado, paralizado, dormido).</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.IsBurned">
            <summary>
            Obtiene o establece si un Pokémon está quemado.
            Si el Pokémon ya está quemado, no puede ser afectado por otro estado (envenenado, paralizado, dormido).
            <exception cref="T:ClassLibrary.PokemonException">Se lanza si el Pokémon ya está afectado por otro estado (envenenado, paralizado, dormido).</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.IsParalyzed">
            <summary>
            Obtiene o establece si un Pokémon está paralizado.
            Si el Pokémon ya está paralizado, no puede ser afectado por otro estado (envenenado, quemado, dormido).
            <exception cref="T:ClassLibrary.PokemonException">Se lanza si el Pokémon ya está afectado por otro estado (envenenado, quemado, dormido).</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.SleepTurns">
            <summary>
            Obtiene o establece los turnos durante los cuales el Pokémon queda dormido.
            Si el Pokémon ya está envenenado, quemado o paralizado, no puede quedarse dormido.
            <exception cref="T:ClassLibrary.PokemonException">Se lanza si el Pokémon ya está afectado por otro estado (envenenado, paralizado, quemado) o si los turnos de estar dormido no están entre 0 y 4.</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.Name">
            <summary>
            Obtiene o establece el nombre del Pokémon.
            </summary>
            <exception cref="T:System.ArgumentNullException">Se lanza si el nombre es nulo o vacío.</exception>
        </member>
        <member name="P:ClassLibrary.Pokemon.HealthPoints">
            <summary>
            Obtiene o establece los puntos de salud del Pokémon.
            </summary>
        </member>
        <member name="F:ClassLibrary.Pokemon._pokemonType">
            <summary>
            Obtiene o establece el tipo del Pokémon.
            <exception cref="T:System.ArgumentOutOfRangeException">Se lanza si el número de turnos está fuera del rango permitido (0-4).</exception>
            </summary>
        </member>
        <member name="P:ClassLibrary.Pokemon.Moves">
            <summary>
            Obtiene o establece la lista de movimientos regulares del Pokémon.
            </summary>
        </member>
        <member name="M:ClassLibrary.Pokemon.TryAttack">
            <summary>
            Verifica si el <c>Pokemon</c>  puede atacar.
            </summary>
        </member>
        <member name="M:ClassLibrary.Pokemon.GetMovesString">
            <summary>
            Método para obtener los movimientos del Pokémon como una cadena.
            </summary>
        </member>
        <member name="T:ClassLibrary.PokemonCatalog">
            <summary>
            La clase  <c>PokemonCatalog</c> se encarga de gestionar el acceso y la manipulación de un catálogo de Pokémon.
            Utiliza un <c>PokemonCatalogBuilder</c> para inicializar el catálogo, permitiendo la búsqueda y recuperación de Pokémon por nombre.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalog.#ctor">
            <summary>
            Constructor de la clase <c>PokemonCatalog</c>.
            Inicializa la lista de Pokémon utilizando el builder.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalog.GetAllPokemons">
            <summary>
            Devuelve una lista de todos los Pokémon en el catálogo.
            </summary>
            <returns>Una lista de objetos Pokémon.</returns>
        </member>
        <member name="M:ClassLibrary.PokemonCatalog.FindPokemonByName(System.String)">
            <summary>
            Encuentra un Pokémon por su nombre en el catálogo.
            </summary>
            <param name="pokemonName">Nombre del Pokémon a buscar.</param>
            <returns>El objeto Pokemon si se encuentra, de lo contrario null.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si el nombre proporcionado es nulo, vacío o contiene solo espacios en blanco.</exception>
        </member>
        <member name="T:ClassLibrary.PokemonCatalogBuilder">
            <summary>
            La clase  <c>PokemonCatalogBuilder</c> se encarga de crear y configurar un catálogo de Pokémon, gestionando la asignación
            de atributos y movimientos. Aplica el Principio de Responsabilidad Única (SRP) al centralizar toda la lógica
            de construcción, lo que facilita el mantenimiento. Como patrón de diseño, se puede considerar un Builder, ya que
            permite crear objetos complejos de manera controlada. Además, utiliza el patrón Expert de GRASP, siendo la autoridad
            en la creación de Pokémon, lo que asegura una implementación coherente. Cumple con el Principio de Sustitución de
            Liskov (LSP), permitiendo su extensión sin afectar al catálogo. Esta estructura promueve un diseño desacoplado y escalable,
            facilitando la integración de nuevas funcionalidades en el sistema.
            </summary>
        </member>
        <member name="P:ClassLibrary.PokemonCatalogBuilder.PokemonList">
            <summary>
            Obtiene una lista de solo lectura de los Pokémon disponibles en el catálogo.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalogBuilder.#ctor">
            <summary>
            Constructor de la clase que inicializa y añade varios Pokémon al catálogo.
            </summary>
        </member>
        <member name="M:ClassLibrary.PokemonCatalogBuilder.AddPokemonToCatalog(System.String,ClassLibrary.Move[],ClassLibrary.Type)">
            <summary>
            Agrega un nuevo Pokémon al catálogo con un nombre, una lista de movimientos y un tipo.
            </summary>
            <param name="name">El nombre del Pokémon. No puede ser nulo, vacío ni contener solo espacios.</param>
            <param name="moves">
            Una lista de movimientos del Pokémon. Debe contener exactamente el número de movimientos permitido 
            definido por <see cref="F:ClassLibrary.Pokemon.MAX_MOVES"/>.
            </param>
            <param name="type">
            El tipo del Pokémon, especificado como un valor válido del enumerador <see cref="T:ClassLibrary.Type"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            Se lanza si el nombre es nulo, vacío, contiene solo espacios o si la lista de movimientos es nula.
            </exception>
            <exception cref="T:ClassLibrary.PokemonException">
            Se lanza si la lista de movimientos no contiene exactamente <see cref="F:ClassLibrary.Pokemon.MAX_MOVES"/> movimientos, o si el tipo proporcionado no es válido.
            </exception>
        </member>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase implementa el bot de Discord.
            </summary>
        </member>
        <member name="T:ClassLibrary.BotLoader">
            <summary>
            Esta clase ejecuta el bot de Discord hasta que en la terminal donde se
            ejecuta el bot se oprime la tecla 'Q'.
            </summary>
        </member>
        <member name="T:ClassLibrary.IBot">
            <summary>
            La interfaz del Bot de Discord para usar con inyección de dependencias.
            </summary>
        </member>
    </members>
</doc>
